generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria_Documento {
  id_categoria     Int         @id @default(autoincrement())
  nombre_categoria String?     @db.VarChar(255)
  Documento        Documento[]
}

model Contenedor {
  id_contenedor      Int              @id @default(autoincrement())
  tipo_contenedor_id Int?
  estante_id         Int?
  anio               String?          @db.VarChar(4)
  nombre             String?          @db.VarChar(255)
  descripcion        String?          @db.VarChar(255)
  fila               String           @db.VarChar(10)
  columna            String?          @db.VarChar(10)
  Estante            Estante?         @relation(fields: [estante_id], references: [id_estante], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenedor_estante")
  Tipo_Contenedor    Tipo_Contenedor? @relation(fields: [tipo_contenedor_id], references: [id_tipo_contenedor], onDelete: NoAction, onUpdate: NoAction, map: "fk_contenedor_tipo")
  Documento          Documento[]
}

model Documento {
  contenedor_id       Int?
  nombre              String?              @db.VarChar(255)
  descripcion         String?              @db.VarChar(255)
  anio                String?              @db.VarChar(4)
  categoria_id        Int?
  documento_url       String?
  id                  String               @id(map: "documento_pk") @db.VarChar(30)
  estado              String?              @db.VarChar(20)
  created_at          DateTime?            @default(now()) @db.Timestamp(6)
  Categoria_Documento Categoria_Documento? @relation(fields: [categoria_id], references: [id_categoria], onDelete: NoAction, onUpdate: NoAction, map: "fk_documento_categoria")
  Contenedor          Contenedor?          @relation(fields: [contenedor_id], references: [id_contenedor], onDelete: NoAction, onUpdate: NoAction, map: "fk_documento_contenedor")
}

model Estado_Transaccion {
  id_estado     Int     @id @default(autoincrement())
  nombre_estado String? @db.VarChar(255)
}

model Estante {
  id_estante     Int          @id @default(autoincrement())
  nombre_estante String?      @db.VarChar(255)
  Contenedor     Contenedor[]
}

model Permisos {
  id_permiso     Int            @id @default(autoincrement())
  nombre_permiso String?        @db.VarChar(255)
  categoria      String?        @db.VarChar(20)
  Rol_Permisos   Rol_Permisos[]
}

model Rol {
  id_rol       Int            @id @default(autoincrement())
  nombre_rol   String?        @db.VarChar(255)
  descripcion  String?        @db.VarChar(255)
  Rol_Permisos Rol_Permisos[]
  Usuario      Usuario[]
}

model Rol_Permisos {
  id_rol_permiso Int       @id @default(autoincrement())
  rol_id         Int?
  permiso_id     Int?
  Permisos       Permisos? @relation(fields: [permiso_id], references: [id_permiso], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_permiso_permiso")
  Rol            Rol?      @relation(fields: [rol_id], references: [id_rol], onDelete: NoAction, onUpdate: NoAction, map: "fk_rol_permiso_rol")
}

model Tipo_Contenedor {
  id_tipo_contenedor Int          @id @default(autoincrement())
  nombre             String?      @db.VarChar(255)
  Contenedor         Contenedor[]
}

model Transaccion {
  id_transaccion   Int       @id @default(autoincrement())
  usuario_id       Int?
  documento_id     String?   @db.VarChar(30)
  tipo_transaccion String?   @db.VarChar(255)
  fecha_inicio     DateTime  @db.Date
  fecha_fin        DateTime? @db.Date
  Usuario          Usuario?  @relation(fields: [usuario_id], references: [id_usuario], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaccion_usuario")
}

model Usuario {
  id_usuario    Int           @id @default(autoincrement())
  nombre        String        @db.VarChar(255)
  email         String        @unique(map: "usuario_pk_email") @db.VarChar(255)
  contrasenia   String        @db.VarChar(255)
  imagen_perfil String?       @db.VarChar(255)
  rol_id        Int?
  Transaccion   Transaccion[]
  Rol           Rol?          @relation(fields: [rol_id], references: [id_rol], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_rol")
}

model estadistica_busqueda {
  consulta        String?
  tiempo_segundos Float?
  id              Int       @id @unique(map: "unique_key_constraint") @default(autoincrement())
  created_at      DateTime? @default(now()) @db.Timestamp(6)
}
